using AutoMapper;
using AutoMapper;
using Domain.Enums;
using Domain.Models;
using Domain.Services.Tour.Interface;
using Domain.Services.TourBooking.DTO;
using Domain.Services.TourBooking.Interface;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using TourBooking.API.TourBooking.RequestObjects;
using TourBooking.Controllers;




namespace TourBooking.API.TourBooking
{
   
    [ApiController]
    [Route("api/v1/[controller]")]
    public class TourBookingController : BaseApiController<TourBookingController>
    {
        private readonly ITourBookingService _service;
        private readonly ITourService _tourService;
        private readonly IMapper _mapper;

        public TourBookingController(ITourBookingService service, IMapper mapper,ITourService tourService)
        {
            _service = service;
            _mapper = mapper;
            _tourService = tourService;
        }

        [Authorize(Roles = "AGENCY,CUSTOMER,CONSULTANT")]
        [HttpPost]
       public async Task<IActionResult> AddTourBooking([FromBody] AddTourBookingRequest request)
        {
            
            var dto = new TourBookingDto
            {
                //Id will be generated by service or database
                TourId = request.TourId,
                UserId=request.UserId,
                FirstName = request.FirstName,
                LastName = request.LastName,
                Gender = request.Gender,
                Dob = request.Dob,
                Citizenship = request.Citizenship,
                PassportNumber = request.PassportNumber,
                IssueDate = request.IssueDate,
                ExpiryDate = request.ExpiryDate,
                PlaceOfBirth = request.PlaceOfBirth,
                LeadPassenger = request.LeadPassenger,
                ParticipantType = request.ParticipantType,
                Status = request.Status
            };

            var result = await _service.AddTourBookingAsync(dto);

            // return 201 Created with route to a “GetById” action
            return CreatedAtAction(nameof(GetTourBookingById),
                new { id = result.Id }, result);
        }

        [Authorize(Roles = "AGENCY,CUSTOMER,CONSULTANT")]
        [HttpGet("booking/{id}")]
        public async Task<IActionResult> GetTourBookingById(Guid id)
        {
            var booking = await _service.GetTourBookingByIdAsync(id);
            return booking == null ? NotFound() : Ok(booking);
        }

        [Authorize(Roles = "AGENCY,CONSULTANT")]
        [HttpGet("tour/{tourId}")]
        public async Task<IActionResult> GetByTourId(Guid tourId)
            => Ok(await _service.GetTourBookingsByTourIdAsync(tourId));

        [Authorize(Roles = "AGENCY,CONSULTANT")]
        [HttpGet]
        public async Task<IActionResult> GetAllTourBookings()
        {
            var result = await _service.GetAllTourBookingsAsync();
            return Ok(result);
        }

        [Authorize(Roles = "AGENCY,CONSULTANT")]
        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateTourBooking(Guid id, [FromBody] UpdateTourBookingDto dto)
        {
            var updated = await _service.UpdateTourBookingAsync(id, dto);
            return updated == null ? NotFound() : Ok(updated);
        }

        [Authorize(Roles = "AGENCY,CONSULTANT")]
        [HttpPatch("{id}")]
        public async Task<IActionResult> PatchTourBooking(Guid id,
            [FromBody] PatchTourBookingDto dto)
        {
            var patched = await _service.PatchTourBookingAsync(id, dto);
            return patched == null ? NotFound() : Ok(patched);
        }

        [Authorize(Roles = "AGENCY,CONSULTANT")]
        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete(Guid id)
        {
            var success = await _service.DeleteTourBookingAsync(id);
            if (!success) return NotFound();
            return Ok(new { message = "Booking deleted successfully" });
        }

        [Authorize(Roles = "CUSTOMER,AGENCY,CONSULTANT")]
        [HttpGet("user/{userId}")]
        public async Task<IActionResult> GetByUserId(Guid userId)
        {
            var result = await _service.GetTourBookingsByUserIdAsync(userId);
            Guid Tourid=new Guid();
            foreach (var booking in result) 
            {
                Tourid = booking.TourId;
            }

            var TourDetails = await _tourService.GetTourByIdAsync(Tourid);
            if (!result.Any()) return NotFound(new { message = "No bookings found for this user." });
            var response = new
            {
                Bookings = result,
                Tours = TourDetails
            };
            return Ok(response);
        }

    }
}






