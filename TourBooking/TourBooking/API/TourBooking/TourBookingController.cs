using AutoMapper;
using AutoMapper;
using Domain.Enums;
using Domain.Models;
using Domain.Services.TourBooking.DTO;
using Domain.Services.TourBooking.Interface;
using Microsoft.AspNetCore.Mvc;
using TourBooking.API.TourBooking.RequestObjects;
using TourBooking.Controllers;




namespace TourBooking.API.TourBooking
{
    [Route("api/v1/tourbookings")]
    [ApiController]
    public class TourBookingController : BaseApiController<TourBookingController>
    {
        private readonly ITourBookingService _service;
        private readonly IMapper _mapper;

        public TourBookingController(ITourBookingService service, IMapper mapper)
        {
            _service = service;
            _mapper = mapper;
        }

        // ✅ Create
        [HttpPost]
     
        public async Task<IActionResult> AddTourBooking([FromBody] AddTourBookingRequest request)
        {
            
            var dto = new TourBookingDto
            {
                //Id will be generated by service or database
                TourId = request.TourId,
                FirstName = request.FirstName,
                LastName = request.LastName,
                Gender = request.Gender,
                Dob = request.Dob,
                Citizenship = request.Citizenship,
                PassportNumber = request.PassportNumber,
                IssueDate = request.IssueDate,
                ExpiryDate = request.ExpiryDate,
                PlaceOfBirth = request.PlaceOfBirth,
                LeadPassenger = request.LeadPassenger,
                ParticipantType = request.ParticipantType,
                Status = request.Status
            };

            var result = await _service.AddTourBookingAsync(dto);

            // return 201 Created with route to a “GetById” action
            return CreatedAtAction(nameof(GetTourBookingById),
                new { id = result.Id }, result);
        }

        // ✅ Get By Id
        [HttpGet("{id:guid}")]
        public async Task<IActionResult> GetTourBookingById(Guid id)
        {
            var booking = await _service.GetTourBookingByIdAsync(id);
            return booking == null ? NotFound() : Ok(booking);
        }

        // ✅ Get By TourId
        [HttpGet("by-tour/{tourId:guid}")]
        public async Task<IActionResult> GetByTourId(Guid tourId)
            => Ok(await _service.GetTourBookingsByTourIdAsync(tourId));
        //✅ GetAll
        [HttpGet]
        public async Task<IActionResult> GetAllTourBookings()
        {
            var result = await _service.GetAllTourBookingsAsync();
            return Ok(result);
        }
        // ✅ Update
        [HttpPut("{id:guid}")]
        public async Task<IActionResult> UpdateTourBooking(Guid id, [FromBody] UpdateTourBookingDto dto)
        {
            var updated = await _service.UpdateTourBookingAsync(id, dto);
            return updated == null ? NotFound() : Ok(updated);
        }
        // ✅ Patch
        [HttpPatch("{id:guid}")]
        public async Task<IActionResult> PatchTourBooking(Guid id,
            [FromBody] PatchTourBookingDto dto)
        {
            var patched = await _service.PatchTourBookingAsync(id, dto);
            return patched == null ? NotFound() : Ok(patched);
        }
              
        // ✅ Delete
        [HttpDelete("{id:guid}")]
        public async Task<IActionResult> Delete(Guid id)
        {
            var success = await _service.DeleteTourBookingAsync(id);
            if (!success) return NotFound();
            return Ok(new { message = "Booking deleted successfully" });
        }
    }
}






